{
  "name": "command-line-args",
  "version": "0.4.0",
  "description": "Command-line parser, usage text producer",
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/command-line-args.git"
  },
  "main": "lib/command-line-args",
  "scripts": {
    "test": "tap test/*.js",
    "docs": "jsdoc2md -t jsdoc2md/README.hbs lib/command-line-args.js > README.md"
  },
  "keywords": [
    "argv",
    "parse",
    "argument",
    "args",
    "option",
    "parser",
    "parsing",
    "cli",
    "command"
  ],
  "author": {
    "name": "Lloyd Brookes"
  },
  "devDependencies": {
    "jsdoc-to-markdown": "^0.2.1",
    "tap": "^0.4.9"
  },
  "dependencies": {
    "array-tools": "^1.1.0",
    "handlebars": "^2.0.0-alpha.4",
    "handlebars-ansi": "0.0.2",
    "nature": "~0.5",
    "object-tools": "^1.0.0",
    "string-tools": "^0.1.4"
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/command-line-args.svg)](https://www.npmjs.org/package/command-line-args)\n[![npm module downloads per month](http://img.shields.io/npm/dm/command-line-args.svg)](https://www.npmjs.org/package/command-line-args)\n[![Build Status](https://travis-ci.org/75lb/command-line-args.svg?branch=master)](https://travis-ci.org/75lb/command-line-args)\n[![Dependency Status](https://david-dm.org/75lb/command-line-args.svg)](https://david-dm.org/75lb/command-line-args)\n\n**work in progress, draft documentation**\n\n#command-line-args\nA command-line parser and usage-guide producer.. Particularly good at organising large sets of options. \n\n##Install\n```sh\n$ npm install command-line-args --save\n```\n\n##Synopsis\nthe following `app.js`...\n```js\nvar cliArgs = require(\"command-line-args\");\n\n/* define the command-line options */\nvar cli = cliArgs([\n    { name: \"verbose\", type: Boolean, alias: \"v\", description: \"Write plenty output\" },\n    { name: \"help\", type: Boolean, description: \"Print usage instructions\" },\n    { name: \"files\", type: Array, defaultOption: true, description: \"The input files\" }\n]);\n\n/* parse the supplied command-line values */\nvar options = cli.parse();\n\n/* generate a usage guide */\nvar usage = cli.usage({\n    header: \"A synopsis application.\",\n    footer: \"For more information, visit http://example.com\"\n});\n    \nconsole.log(options.help ? usage : options);\n```\n...returns this output at the command line:\n```sh\n$ node app.js\n{}\n$ node app.js -v\n{ verbose: true }\n$ node app.js README.md package.json\n{ files: [ 'README.md', 'package.json' ] }\n$ node app.js README.md package.json -v\n{ verbose: true, files: [ 'README.md', 'package.json' ] }\n$ node app.js --help\n\n  A synopsis application.\n\n  Usage\n\n  -v, --verbose    Write plenty output\n  --help           Print usage instructions\n  --files <array>  The input files\n\n  For more information, visit http://example.com\n\n```\n\n#API Reference\n<a name=\"module_command-line-args\"></a>\n##command-line-args(options)\nA constructor function, taking your desired command-line option definitions as input, returning an instance of `command-line-args` which you can `parse()` or `getUsage()`.\n\n\n- options [Array.&lt;OptionDefinition&gt;](#module_command-line-args.OptionDefinition) - list of option definitions\n\n  \n####Example\n```js\nvar cliArgs = require(\"command-line-args\");\nvar cli = cliArgs([\n    { name: \"help\", type: Boolean, alias: \"h\" },\n    { name: \"files\", type: Array, defaultOption: true}\n]);\nvar argv = cli.parse();\n```\n<a name=\"module_command-line-args#parse\"></a>\n###cli.parse([argv])\nReturns a flat, or grouped object containing the values set at the command-line\n\n\n- [argv=process.argv] `object` - Optional argv array, pass to override the default `process.argv`.\n\n**Returns**: `object`  \n####Example\nOutput from `parse()` looks something like this:\n```js\n{\n    delete: \"thisfile.txt\",\n    force: true\n}\n```\n\nor, if the option definitions are grouped:\n```js\n{\n    standard: {\n        delete: \"thisfile.txt\",\n        force: true\n    },\n    extra: {\n        intentions: \"bad\"\n    }\n}\n```\n<a name=\"module_command-line-args#getUsage\"></a>\n###cli.getUsage(options)\n\n- options `object` - options for template\n- options.title `string` - a title\n- options.header `string` - a header\n- options.footer `string` - a footer\n- options.forms `array` - the invocation forms\n\n**Returns**: `string`  \n<a name=\"module_command-line-args.OptionDefinition\"></a>\n###type: OptionDefinition\n\nDefines an option\n\n**Scope**: inner typedef of [command-line-args](#module_command-line-args)  \n**Type**: `object`  \n<a name=\"\"></a>\n###name\nthe option name, used as the long option (e.g. `--name`)\n\n**Type**: `string`  \n<a name=\"\"></a>\n###type\nan optional function (e.g. `Number` or a custom function) used as a setter to enforce type.\n\n**Type**: `function`  \n<a name=\"\"></a>\n###alias\na single character alias, used as the short option (e.g. `-n`)\n\n**Type**: `string`  \n<a name=\"\"></a>\n###defaultOption\nif values are specified without an option name, they are assigned to the defaultOption\n\n**Type**: `boolean`  \n<a name=\"\"></a>\n###description\nused in the usage guide\n\n**Type**: `string`  \n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/command-line-args/issues"
  },
  "homepage": "https://github.com/75lb/command-line-args",
  "_id": "command-line-args@0.4.0",
  "_from": "command-line-args@^0.4.0"
}
